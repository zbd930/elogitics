<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 扫描service、dao组件 -->
    <context:component-scan base-package="com.duogesi" />
    <!-- 分解配置 jdbc.properites -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <mvc:annotation-driven />
    <!--&lt;!&ndash; 连接池基本参数配置，类似数据库连接池 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:redis.properties"-->
                                  <!--ignore-unresolvable="true" />-->

    <!--<bean id="redisUtil" class="com.duogesi.Utils.RedisUtil">-->
    <!--<property name="redisTemplate" ref="redisTemplate" />-->
    <!--</bean>-->

    <!-- redis连接池 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="600" />
        <property name="maxIdle" value="300" />
        <property name="testOnBorrow" value="true" />
    </bean>

    <!-- 连接池配置，类似数据库连接池 -->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="localhost"></property>
        <property name="port" value="6379"></property>
        <!-- <property name="password" value="${redis.pass}"></property> -->
        <property name="poolConfig" ref="poolConfig"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
<!--            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />-->
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean >

    <!-- 数据源c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxPoolSize" value="${c3p0.pool.size.max}" />
        <property name="minPoolSize" value="${c3p0.pool.size.min}" />
        <property name="initialPoolSize" value="${c3p0.pool.size.ini}" />
        <property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
        <property name="testConnectionOnCheckout" value="false" />
        <property name="testConnectionOnCheckin" value="true" />
        <property name="idleConnectionTestPeriod" value="10800" />
    </bean>


    <!-- sessionFactory 将spring和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:spring-mybatis.xml" />
        <property name="mapperLocations" value="classpath*:com/duogesi/mapper/**/*.xml" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.duogesi.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(public * com.duogesi.service..*.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>

    <!-- 开启aop注解方式,默认为false -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!--<bean id="mail" class="com.duogesi.Aspect.mail_aspect">-->
        <!--<property name="UserMapper" ref="userMapper"></property>-->
        <!--<property name="CarMapper" ref="carMapper"></property>-->
    <!--</bean>-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;-->
        <!--public * addNewUser(entity.User)： “*”表示匹配所有类型的返回值。-->
        <!--public void *(entity.User)： “*”表示匹配所有方法名。-->
        <!--public void addNewUser(..)： “..”表示匹配所有参数个数和类型。-->
        <!--* com.service.*.*(..)：匹配com.service包下所有类的所有方法。-->
        <!--* com.service..*.*(..)：匹配com.service包及其子包下所有类的所有方法-->
         <!--&ndash;&gt;-->
        <!--&lt;!&ndash;execution(public * com.duogesi.service.orderservice.*(..))&ndash;&gt;-->
        <!--&lt;!&ndash; 定义切入点 &ndash;&gt;-->
        <!--<aop:pointcut expression="execution(public * com.duogesi.service.Chehangservice.update_order(..))) "-->
                      <!--id="mail"/>-->
        <!--&lt;!&ndash; 引用包含增强方法的Bean &ndash;&gt;-->
        <!--<aop:aspect ref="mail">-->
            <!--&lt;!&ndash; 将before()方法定义为前置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--<aop:before method="beforMethod" pointcut-ref="pointcut" />-->
            <!--&lt;!&ndash; 将afterReturning()方法定义为后置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--&lt;!&ndash; 通过returning属性定义名为result的参数注入返回值 &ndash;&gt;-->
            <!--<aop:after-returning method="afterMethod" pointcut-ref="pointcut" />-->
            <!--<aop:around method="aroundMethod" pointcut-ref="pointcut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->

    <!--<bean id="theLogger" class="com.duogesi.Aspect.Register_order_aspect"/>-->
    <!--<bean id="mailLoggger" class="com.duogesi.Aspect.Update_status_aspect"/>-->
    <!--<bean id="receivedmail" class="com.duogesi.Aspect.received_order_aspect"/>-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;-->
        <!--public * addNewUser(entity.User)： “*”表示匹配所有类型的返回值。-->
        <!--public void *(entity.User)： “*”表示匹配所有方法名。-->
        <!--public void addNewUser(..)： “..”表示匹配所有参数个数和类型。-->
        <!--* com.service.*.*(..)：匹配com.service包下所有类的所有方法。-->
        <!--* com.service..*.*(..)：匹配com.service包及其子包下所有类的所有方法-->
         <!--&ndash;&gt;-->
        <!--&lt;!&ndash;execution(public * com.duogesi.service.orderservice.*(..))&ndash;&gt;-->
        <!--&lt;!&ndash; 定义切入点 &ndash;&gt;-->
        <!--<aop:pointcut expression="execution(public * com.duogesi.service.Chehangservice.update_order(..))) "-->
                      <!--id="pointcut"/>-->
        <!--<aop:pointcut id="pointcut1" expression="execution(public * com.duogesi.service.Huodaiservice.update_status(..))"/>-->
        <!--<aop:pointcut id="pointcut2" expression="execution(public * com.duogesi.service.Huodaiservice.change_status(..))"/>-->
        <!--&lt;!&ndash; 引用包含增强方法的Bean &ndash;&gt;-->
        <!--<aop:aspect ref="theLogger">-->
            <!--&lt;!&ndash; 将before()方法定义为前置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--<aop:before method="beforMethod" pointcut-ref="pointcut" />-->
            <!--&lt;!&ndash; 将afterReturning()方法定义为后置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--&lt;!&ndash; 通过returning属性定义名为result的参数注入返回值 &ndash;&gt;-->
            <!--<aop:after-returning method="afterMethod" pointcut-ref="pointcut" />-->
            <!--<aop:around method="aroundMethod" pointcut-ref="pointcut"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="mailLoggger">-->
            <!--&lt;!&ndash; 将before()方法定义为前置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--<aop:before method="beforMethod" pointcut-ref="pointcut1" />-->
            <!--&lt;!&ndash; 将afterReturning()方法定义为后置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--&lt;!&ndash; 通过returning属性定义名为result的参数注入返回值 &ndash;&gt;-->
            <!--<aop:after-returning method="afterMethod" pointcut-ref="pointcut1" />-->
            <!--<aop:around method="aroundMethod" pointcut-ref="pointcut1"/>-->
        <!--</aop:aspect>-->
        <!--<aop:aspect ref="receivedmail">-->
            <!--&lt;!&ndash; 将before()方法定义为前置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--<aop:before method="beforMethod" pointcut-ref="pointcut2" />-->
            <!--&lt;!&ndash; 将afterReturning()方法定义为后置增强,并引用pointcut切入点 &ndash;&gt;-->
            <!--&lt;!&ndash; 通过returning属性定义名为result的参数注入返回值 &ndash;&gt;-->
            <!--<aop:after-returning method="afterMethod" pointcut-ref="pointcut2" />-->
            <!--<aop:around method="aroundMethod" pointcut-ref="pointcut2"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
</beans>
